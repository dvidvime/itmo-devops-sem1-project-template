name: Go Test Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        # Добавляем volume для сохранения данных
        volumes:
          - postgres_data:/var/lib/postgresql/data
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Prepare database
      run: |
        psql -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} -f init.sql
      env:
        PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.3'

    - name: Make scripts executable
      run: |
        chmod +x scripts/prepare.sh
        chmod +x scripts/run.sh
        chmod +x scripts/tests.sh

    - name: Prepare environment
      run: |
        CGO_ENABLED=0 GOOS=linux go build -o project_store
        chmod +x project_store

    - name: Run application
      run: |
        ./project_store &
        sleep 5
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    - name: Test Level 1
      id: test-level-1
      continue-on-error: true
      run: ./scripts/tests.sh 1
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    - name: Test Level 2
      id: test-level-2
      continue-on-error: true
      run: ./scripts/tests.sh 2
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    - name: Test Level 3
      id: test-level-3
      continue-on-error: true
      run: ./scripts/tests.sh 3
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    - name: Check test results
      if: always()
      run: |
        if [[ "${{ steps.test-level-1.outcome }}" == "success" ]] || \
           [[ "${{ steps.test-level-2.outcome }}" == "success" ]] || \
           [[ "${{ steps.test-level-3.outcome }}" == "success" ]]; then
          echo "At least one test level passed successfully!"
          exit 0
        else
          echo "All test levels failed!"
          exit 1
        fi
  build_and_push_to_docker_hub:
    name: Build image and push to Dockerhub
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build&push backend to DockerHub
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_LOGIN }}/project_store:latest
  deploy_and_production_test:
    name: Deploy to YC and test again
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - uses: actions/checkout@v3
      - name: Make scripts executable
        run: |
          chmod +x scripts/run.sh
          chmod +x scripts/tests.sh
      - name: Run deployment script
        run: ./scripts/run.sh
        env:
          YC_TOKEN: ${{ secrets.YC_TOKEN }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}